-- Custom spindle control for HITECO ATC
-- stopping process
if CorbinExtra == nil then 
	CorbinExtra = require "CorbinExtra"
end


function m5()
	local inst = mc.mcGetInstance()
	mc.mcCntlSetLastError(inst, "M5: Turning off the spindle")

	-- stop the spindle, if it isn't running
	dir, rc = mc.mcSpindleGetDirection(inst)
	if dir ~= mc.MC_SPINDLE_OFF then
		-- the "Wait" version does not work for me...it just hangs.
		result = mc.mcSpindleSetDirection(inst, mc.MC_SPINDLE_OFF)

		if result == mc.MERROR_NOERROR then
			mc.mcCntlSetLastError(inst, "Spindle now OFF.")
		elseif result == mc.MERROR_TIMED_OUT then
			mc.mcCntlSetLastError(inst, "ERROR: spindle timed out.")
		else 
			mc.mcCntlSetLastError(inst, "ERROR: got an error turning on the spindle: "..result)
		end

---		mc.mcCntlSetLastError(inst, "M5: Spindle now off, waiting for spin down 5 seconds")
		--CorbinExtra.Sleep(10)
	--	mc.mcCntlSetLastError(inst, "M5: Sleep done, turning off the air")
		--CorbinExtra.SetAirPressure(0)
	--	mc.mcCntlSetLastError(inst, "M5 done, air is now off")
	else
--		mc.mcCntlSetLastError(inst, "spindle is already off");
	end

	return 0
end

-- testing
if (mc.mcInEditor() == 1) then
	local inst = mc.mcGetInstance()

	mc.mcCntlSetLastError(inst, "Testing!! in the editor")

	rc = mc.mcCntlGcodeExecute(inst, "M05");

	mc.mcCntlSetLastError(inst, "DONE:..".. rc.." "..mc.MERROR_NOT_NOW.." "..mc.MERROR_NOT_COMPILED)
	--m5()

end
